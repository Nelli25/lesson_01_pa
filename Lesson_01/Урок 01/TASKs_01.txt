Задачи:

№ 1.1. Соедините два словаря в один 
    dict1 = {'One':1, 'Two':2, 'Three':3}
    dict2 = {'Four':4, 'Five':5, 'Six':6}
Не меняйте ни один из исходных словарей.

- Вариант 1. Используйте методы объекта
- Вариант 2. Используйте явный цикл.

Напишите функцию, которая на вход принимает два словаря и возвращает один объединенный словарь Используйте аннотирование типов.
Примеры/Тесты:
    <function_name>(dict1, dict2) -> {'One': 1, 'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6}


№ 1.2 Напишите функцию, которая из двух списков, делает один словарь, где элементы из первого списка - ключи, а элементы из второго списка - значения
keys = ['One', 'Two', 'Three']
values = [1,2,3]
Используйте аннотирование типов
- Используйте цикл for
- Используйте dict comprehensions

Усложнение [*] Используйте функцию zip. Проверьте на списках разной длины
Примеры/Тесты:
    <function_name>(keys, values) -> {'One': 1, 'Two': 2, 'Three': 3}


№1.3 Извлеките только два ключа name и age из представленного словаря. На выходе словарь с нужными ключами
- Используя dict comprehensions
- Напишите функцию. Функция на вход принимает: исходный словарь, ключи, которые нужно извлечь (аргумент по умолчанию), На выходе словарь с нужными ключами. Используйте аннотирование типов
client = {'name': 'John', 'age':25, 'salary': 5000, 'city':'Moscow'}

№1.4. Сгенерируйте случайные целые числа от 0 до 100 в количестве 5 штук с помощью модуля random
- Используйте list comprehensions
- Зафиксируйте псевдогенерацию, чтобы сгенерированные значения всегда были одинаковые. Проверьте на нескольких псевдогенерациях.

№1.5. Напишите функцию-генератор. Генератор на вход принимает список с данными о клиенте(смотри ниже пример)
Внутри генератора реализуйте обход по списку с данными

На каждой итерации генератор будет возвращать кортеж из двух элементов:
- данные по конкретному клиенту,
- значение (float), которое показывает, сколько секунд прошло с предыдущей итерации.
Эти секунды, должны показывать время не с начала запуска генератора, а именно то время, которое прошло с предыдущей итерации.
А значит время на первой итерации должно равняться 0.
Используйте функцию time из модуля time для подсчета времени.
Чтобы проверить работу таймера, запустите проход по генератору в цикле с time.sleep(2)
ПРимер данных 
lst_data = [
    {'name': 'John', 'age': 25, 'salary': 5000, 'city': 'Moscow'},
    {'name': 'Mike', 'age': 31, 'salary': 7000, 'city': 'St-Petersburg'},
    {'name': 'Ann', 'age': 35, 'salary': 15000, 'city': 'Moscow'},
    {'name': 'Mak', 'age': 23, 'salary': 6000, 'city': 'Kazan'},

Примеры/Тесты:
({'name': 'John', 'age': 25, 'salary': 5000, 'city': 'Moscow'}, 0.0)
({'name': 'Mike', 'age': 31, 'salary': 7000, 'city': 'St-Petersburg'}, 2.0001144409179688)
({'name': 'Ann', 'age': 35, 'salary': 15000, 'city': 'Moscow'}, 2.0001144409179688)
({'name': 'Mak', 'age': 23, 'salary': 6000, 'city': 'Kazan'}, 2.0001144409179688)

№1.6 Напишите функцию, которая может принимать любое количество трат пользователя (произвольное количество аргументов)
и возвращает их сумму и среднее.
На вход поступают целочисленные значения в любом количестве
На выходе словарь с ключами суммы трат и средней траты
Примеры/Тесты:
    <function_name>(1,2,3,4,5,6) -> {'sum': 21, 'mean': 3.5}



